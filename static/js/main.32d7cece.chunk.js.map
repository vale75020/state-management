{"version":3,"sources":["Movie.js","MovieContext.js","MovieList.js","Nav.js","AddMovie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","name","price","react_default","a","createElement","MovieContext","createContext","MovieProvider","props","_useState","useState","id","_useState2","Object","slicedToArray","movies","setMovies","Provider","value","children","MovieList","_useContext","useContext","_useContext2","map","movie","src_Movie","key","Nav","stylediv","width","textAlign","minWidth","margin","style","backgroundColor","color","height","display","flexWrap","length","AddMovie","setName","_useState3","_useState4","setPrice","fontSize","padding","onSubmit","e","preventDefault","prevMovies","concat","toConsumableArray","styleForm","border","placeholder","type","onChange","target","App","MovieContext_MovieProvider","className","src_Nav","src_AddMovie","src_MovieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32d7cece.chunk.js","sourcesContent":["import React from 'react';\n\nconst Movie = ({name, price}) => {\n    return (\n        <div>\n            <h3>{name}</h3>\n            <p>$ {price}</p>\n        </div>\n    );\n};\n\nexport default Movie;","import React,{useState, createContext} from 'react';\n\nexport const MovieContext = createContext();\n\n\nexport const MovieProvider = (props) => {\n    const [movies, setMovies] = useState([\n        {\n            name: 'Harry Potter',\n            price: '10',\n            id: 23456\n        },\n        {\n            name: 'Game of Thrones',\n            price: '10',\n            id: 23457\n        },\n        {\n            name: 'Inception',\n            price: '10',\n            id: 23458\n        },\n    ])\n    return (\n        <div>\n            <MovieContext.Provider value={[movies, setMovies]}>\n                {props.children}\n            </MovieContext.Provider>\n        </div>\n    );\n};\n","import React,{ useState, useContext} from 'react';\nimport Movie from './Movie';\nimport { MovieContext } from './MovieContext';\n\nconst MovieList = () => { \n    const [movies, setMovies] = useContext(MovieContext)\n    return (\n        <div>\n          {movies.map(movie => (\n              <Movie name={movie.name} price={movie.price} key={movie.id}/>\n          ))}  \n        </div>\n    );\n};\n\nexport default MovieList;","import React, {useContext} from \"react\";\nimport { MovieContext } from './MovieContext';\n\nconst Nav = () => {\n    const [movies, setMovies] = useContext(MovieContext);\n  let style = {\n    width: \"100%\",\n    backgroundColor: \"black\",\n    color: \"white\",\n    height: \"auto\",\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  };\n  let stylediv = {\n      width:\"50%\",\n      textAlign: \"center\",\n      minWidth: \"300px\",\n      margin:\"0 auto\"\n  }\n  return (\n    <div style={style}>\n      <div style={stylediv}>\n        <h2>Valentino</h2>\n      </div>\n      <div style={stylediv}>\n        <h2>List of Movies : {movies.length}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useState, useContext } from \"react\";\nimport { MovieContext } from './MovieContext'\n\nconst AddMovie = () => {\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [movies, setMovies] = useContext(MovieContext)\n\n  const updateName = e => {\n    setName(e.target.value);\n  };\n\n  const updatePrice = e => {\n    setPrice(e.target.value);\n  };\n\n  const addMovie = e => {\n    e.preventDefault();\n    setMovies(prevMovies => [...prevMovies, {name: name, price: price}]);\n  };\n\n  let style = {\n    minWidth: \"300px\",\n    fontSize: \"18px\",\n    padding: \"2px\",\n    margin: \"10px auto\"\n  };\n\n  let styleForm = {\n    border: \"1px solid black\",\n    margin: \"10px auto\",\n    width: \"310px\",\n    padding: \"10px\"\n  }\n\n  return (\n    <form onSubmit={addMovie} style={{styleForm}}>\n      <h2>Add your movie</h2>\n      <input\n        placeholder=\"Name of the movie\"\n        style={style}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={updateName}\n      />\n      <br />\n      <input\n        placeholder=\"Price of the movie\"\n        style={style}\n        type=\"text\"\n        name=\"price\"\n        value={price}\n        onChange={updatePrice}\n      />\n      <br />\n      <button style={style}>Submit</button>\n    </form>\n  );\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport './App.css';\nimport MovieList from './MovieList';\nimport Nav from './Nav';\nimport{ MovieProvider } from './MovieContext'\nimport AddMovie from './AddMovie'\n\n\nfunction App() {\n  return (\n    <MovieProvider>\n    <div className=\"App\">\n      <Nav />\n      <AddMovie />\n      <MovieList />\n    </div>\n    </MovieProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}